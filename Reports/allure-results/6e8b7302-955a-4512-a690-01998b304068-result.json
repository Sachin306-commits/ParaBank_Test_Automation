{"name": "test_request_loan", "status": "broken", "statusDetails": {"message": "jsonschema.exceptions.ValidationError: 1761066898273 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['responseDate']:\n    {'type': 'string',\n     'format': 'date-time',\n     'description': 'Date and time when the loan response was generated.'}\n\nOn instance['responseDate']:\n    1761066898273", "trace": "@pytest.mark.smoke\n    def test_request_loan():\n    \n        customerId = 12767,\n        amount = 122,\n        downPayment = 2,\n        fromAccountId = 14232\n        user_data = payloads.load_test_data()  # you can also pass an index if you want: load_test_data(0)\n    \n        #  Build the payload from the loaded data\n        payload = payloads.build_customer_payload(user_data)\n    \n        #  Call API Client function\n        response = REQUEST_LOAN.request_loan_by_user(payload,customerId = customerId,amount=amount,downPayment =downPayment, fromAccountId=fromAccountId)\n        print(\"Status Code:\", response.status_code)\n        print(\"Response Body:\", response.text)\n        assert response.status_code == 200, f\"Expected 200, got {response.status_code}\"\n    \n        response_json = response.json()\n    \n        # Load schema\n        with open(\"Schemas/request_loan.json\") as f:\n            schema = json.load(f)\n    \n        # Validate against schema (only if non-empty)\n        if response_json:\n>           validate(instance=response_json, schema=schema)\n\nTests\\API_Testing\\POST_TESTING\\test_request_loan.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = {'accountId': 27996, 'approved': True, 'loanProviderName': 'ParaBank', 'responseDate': 1761066898273}\nschema = {'$schema': 'https://json-schema.org/draft/2020-12/schema', 'properties': {'accountId': {'description': 'Associated ac... ...}, 'required': ['responseDate', 'loanProviderName', 'approved', 'accountId'], 'title': 'Loan Response Schema', ...}\ncls = <class 'jsonschema.validators.Draft202012Validator'>, args = (), kwargs = {}\nvalidator = Draft202012Validator(schema={'$schema': 'https://json...020-12/schema', 'properties': {'accountId': {'description': 'A...esponseDate', 'loanProviderName', 'approved', 'accountId'], 'title': 'Loan Response Schema', ...}, format_checker=None)\nerror = <ValidationError: \"1761066898273 is not of type 'string'\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):  # noqa: D417\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft202012Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n    \n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: 1761066898273 is not of type 'string'\nE           \nE           Failed validating 'type' in schema['properties']['responseDate']:\nE               {'type': 'string',\nE                'format': 'date-time',\nE                'description': 'Date and time when the loan response was generated.'}\nE           \nE           On instance['responseDate']:\nE               1761066898273\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\jsonschema\\validators.py:1332: ValidationError"}, "attachments": [{"name": "stdout", "source": "ff164d4c-a559-4190-a861-97b656805eeb-attachment.txt", "type": "text/plain"}], "start": 1761066896755, "stop": 1761066898527, "uuid": "62f81a64-c66c-4b22-89f1-9994add1181e", "historyId": "cdd70bd984a05c346d388513ea7279e6", "testCaseId": "cdd70bd984a05c346d388513ea7279e6", "fullName": "Tests.API_Testing.POST_TESTING.test_request_loan#test_request_loan", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "Tests.API_Testing.POST_TESTING"}, {"name": "suite", "value": "test_request_loan"}, {"name": "host", "value": "MSI"}, {"name": "thread", "value": "23368-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.API_Testing.POST_TESTING.test_request_loan"}], "titlePath": ["Tests", "API_Testing", "POST_TESTING", "test_request_loan.py"]}