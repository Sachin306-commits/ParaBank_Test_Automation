{"name": "test_register_user[Sachin121111@]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7f6581eb5+80197]\n\tGetHandleVerifier [0x0x7ff7f6581f10+80288]\n\t(No symbol) [0x0x7ff7f63002fa]\n\t(No symbol) [0x0x7ff7f633f87b]\n\t(No symbol) [0x0x7ff7f6339bd0]\n\t(No symbol) [0x0x7ff7f638e0ef]\n\t(No symbol) [0x0x7ff7f638d870]\n\t(No symbol) [0x0x7ff7f6380153]\n\t(No symbol) [0x0x7ff7f6348b02]\n\t(No symbol) [0x0x7ff7f63498d3]\n\tGetHandleVerifier [0x0x7ff7f683e83d+2949837]\n\tGetHandleVerifier [0x0x7ff7f6838c6a+2926330]\n\tGetHandleVerifier [0x0x7ff7f68586c7+3055959]\n\tGetHandleVerifier [0x0x7ff7f659cfee+191102]\n\tGetHandleVerifier [0x0x7ff7f65a50af+224063]\n\tGetHandleVerifier [0x0x7ff7f658af64+117236]\n\tGetHandleVerifier [0x0x7ff7f658b119+117673]\n\tGetHandleVerifier [0x0x7ff7f65710a8+11064]\n\tBaseThreadInitThunk [0x0x7ffe77bfe8d7+23]\n\tRtlUserThreadStart [0x0x7ffe7972c53c+44]", "trace": "request = <SubRequest 'browserInstance' for <Function test_register_user[Sachin121111@]>>\n\n    @pytest.fixture\n    def browserInstance(request):\n        browser_name = request.config.getoption(\"--browser_name\").lower()\n        incognito = request.config.getoption(\"--incognito\")\n    \n        if browser_name == \"chrome\":\n            options = ChromeOptions()\n            if incognito:\n                options.add_argument(\"--incognito\")\n            options.add_argument(\"--start-maximized\")\n>           driver = webdriver.Chrome(service=ChromeService(), options=options)\n\nconftest.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000206681A19A0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: probably user data d...ff7f65710a8+11064]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe77bfe8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe7972c53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7f6581eb5+80197]\nE       \tGetHandleVerifier [0x0x7ff7f6581f10+80288]\nE       \t(No symbol) [0x0x7ff7f63002fa]\nE       \t(No symbol) [0x0x7ff7f633f87b]\nE       \t(No symbol) [0x0x7ff7f6339bd0]\nE       \t(No symbol) [0x0x7ff7f638e0ef]\nE       \t(No symbol) [0x0x7ff7f638d870]\nE       \t(No symbol) [0x0x7ff7f6380153]\nE       \t(No symbol) [0x0x7ff7f6348b02]\nE       \t(No symbol) [0x0x7ff7f63498d3]\nE       \tGetHandleVerifier [0x0x7ff7f683e83d+2949837]\nE       \tGetHandleVerifier [0x0x7ff7f6838c6a+2926330]\nE       \tGetHandleVerifier [0x0x7ff7f68586c7+3055959]\nE       \tGetHandleVerifier [0x0x7ff7f659cfee+191102]\nE       \tGetHandleVerifier [0x0x7ff7f65a50af+224063]\nE       \tGetHandleVerifier [0x0x7ff7f658af64+117236]\nE       \tGetHandleVerifier [0x0x7ff7f658b119+117673]\nE       \tGetHandleVerifier [0x0x7ff7f65710a8+11064]\nE       \tBaseThreadInitThunk [0x0x7ffe77bfe8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffe7972c53c+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "parameters": [{"name": "data", "value": "{'user_first_name': 'Sachin Kumar', 'user_second_name': 'Tiwari', 'user_address': 'Janta Bazar', 'user_city': 'Chapra', 'user_state': 'Bihar', 'user_zip_code': '841224', 'user_phone_no': '7903809668', 'user_ssn': '123-45-6789', 'user_base_name': 'Sachin121111@', 'user_password': 'Sachin306@', 'user_confirm_password': 'Sachin306@', 'send_money': '10000', 'payee_name': 'Sachin_Tiwari', 'Account_number': '12345678', 'Confirm_account_number': '12345678', 'Transfer_Account': '100000', 'Payee_contact_details': '9887125284', 'contact_email_name': 'st9420907@gmail.com', 'message': 'Hi There i want my money back', 'loan_amount': '1000', 'down_payment': '12', 'high_amount_loan': '1000000', 'phoneNumber': '7903809668', 'accountNumber': '15342', 'amount': '1000', 'accountId': '17673'}"}], "start": 1760509721864, "stop": 1760509721864, "uuid": "551cb4ae-90c6-4fa3-9323-45ebe8fc999b", "historyId": "156fde665b961cb2a64de80b9a810258", "testCaseId": "40f8d67be23bc6d0ee2936eff6a8985b", "fullName": "Tests.Positive_Testing.test_register#test_register_user", "labels": [{"name": "tag", "value": "parametrized"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "Tests.Positive_Testing"}, {"name": "suite", "value": "test_register"}, {"name": "host", "value": "MSI"}, {"name": "thread", "value": "5624-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.Positive_Testing.test_register"}], "titlePath": ["Tests", "Positive_Testing", "test_register.py"]}