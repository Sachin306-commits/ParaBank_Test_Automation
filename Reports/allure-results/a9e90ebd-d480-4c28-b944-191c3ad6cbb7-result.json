{"name": "test_register_user[SRajni731@]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome=141.0.7390.76)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6ee1be9e5+80021]\n\tGetHandleVerifier [0x0x7ff6ee1bea40+80112]\n\t(No symbol) [0x0x7ff6edf4060f]\n\t(No symbol) [0x0x7ff6edf2d82f]\n\t(No symbol) [0x0x7ff6edf2d51d]\n\t(No symbol) [0x0x7ff6edf2b08c]\n\t(No symbol) [0x0x7ff6edf2bb0b]\n\t(No symbol) [0x0x7ff6edf3ab0e]\n\t(No symbol) [0x0x7ff6edf51161]\n\t(No symbol) [0x0x7ff6edf583aa]\n\t(No symbol) [0x0x7ff6edf2c2be]\n\t(No symbol) [0x0x7ff6edf50e51]\n\t(No symbol) [0x0x7ff6edfe9566]\n\t(No symbol) [0x0x7ff6edfc1003]\n\t(No symbol) [0x0x7ff6edf895d1]\n\t(No symbol) [0x0x7ff6edf8a3f3]\n\tGetHandleVerifier [0x0x7ff6ee47dd8d+2960445]\n\tGetHandleVerifier [0x0x7ff6ee47804a+2936570]\n\tGetHandleVerifier [0x0x7ff6ee498a87+3070263]\n\tGetHandleVerifier [0x0x7ff6ee1d84ce+185214]\n\tGetHandleVerifier [0x0x7ff6ee1dff1f+216527]\n\tGetHandleVerifier [0x0x7ff6ee1c7c24+117460]\n\tGetHandleVerifier [0x0x7ff6ee1c7ddf+117903]\n\tGetHandleVerifier [0x0x7ff6ee1adcb8+11112]\n\tBaseThreadInitThunk [0x0x7ff87f20e8d7+23]\n\tRtlUserThreadStart [0x0x7ff8801ec53c+44]", "trace": "browserInstance = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"214c1d265a8ebfc54c2d0751f2786854\")>\ndata = {'user_address': 'Janta Bazar', 'user_base_name': 'SRajni731@', 'user_city': 'Chapra', 'user_confirm_password': 'Sachin306@', ...}\n\n    @pytest.mark.parametrize(\n        \"data\",\n        test_list,   # this comes from test_data[\"data\"]\n        ids=[d[\"user_base_name\"] for d in test_list]\n    )\n    @pytest.mark.smoke\n    @pytest.mark.parametrized\n    def test_register_user(browserInstance,data):\n        driver = browserInstance\n>       driver.get(\"https://parabank.parasoft.com/parabank/index.htm\")\n\nTests\\Positive_Testing\\test_register.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002337FE03860>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...ff6ee1adcb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff87f20e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ff8801ec53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome=141.0.7390.76)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6ee1be9e5+80021]\nE       \tGetHandleVerifier [0x0x7ff6ee1bea40+80112]\nE       \t(No symbol) [0x0x7ff6edf4060f]\nE       \t(No symbol) [0x0x7ff6edf2d82f]\nE       \t(No symbol) [0x0x7ff6edf2d51d]\nE       \t(No symbol) [0x0x7ff6edf2b08c]\nE       \t(No symbol) [0x0x7ff6edf2bb0b]\nE       \t(No symbol) [0x0x7ff6edf3ab0e]\nE       \t(No symbol) [0x0x7ff6edf51161]\nE       \t(No symbol) [0x0x7ff6edf583aa]\nE       \t(No symbol) [0x0x7ff6edf2c2be]\nE       \t(No symbol) [0x0x7ff6edf50e51]\nE       \t(No symbol) [0x0x7ff6edfe9566]\nE       \t(No symbol) [0x0x7ff6edfc1003]\nE       \t(No symbol) [0x0x7ff6edf895d1]\nE       \t(No symbol) [0x0x7ff6edf8a3f3]\nE       \tGetHandleVerifier [0x0x7ff6ee47dd8d+2960445]\nE       \tGetHandleVerifier [0x0x7ff6ee47804a+2936570]\nE       \tGetHandleVerifier [0x0x7ff6ee498a87+3070263]\nE       \tGetHandleVerifier [0x0x7ff6ee1d84ce+185214]\nE       \tGetHandleVerifier [0x0x7ff6ee1dff1f+216527]\nE       \tGetHandleVerifier [0x0x7ff6ee1c7c24+117460]\nE       \tGetHandleVerifier [0x0x7ff6ee1c7ddf+117903]\nE       \tGetHandleVerifier [0x0x7ff6ee1adcb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ff87f20e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ff8801ec53c+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: TimeoutException"}, "parameters": [{"name": "data", "value": "{'user_first_name': 'Rajni Kumari', 'user_second_name': 'Tiwari', 'user_address': 'Janta Bazar', 'user_city': 'Chapra', 'user_state': 'Bihar', 'user_zip_code': '841224', 'user_phone_no': '7351223572', 'user_ssn': '123-45-6789', 'user_base_name': 'SRajni731@', 'user_password': 'Sachin306@', 'user_confirm_password': 'Sachin306@'}"}], "start": 1760926631624, "stop": 1760926931656, "uuid": "a1721381-13e2-4f69-b832-716050e461a5", "testCaseId": "40f8d67be23bc6d0ee2936eff6a8985b", "fullName": "Tests.Positive_Testing.test_register#test_register_user", "titlePath": ["Tests", "Positive_Testing", "test_register.py"]}